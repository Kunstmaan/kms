#!/usr/bin/env ruby
# Usage: kms fetch -p projectname -s server [--debug|-d]
# Summary: Fetches a project from a server
# Help: This will fetch a project from a server and set it up on your computer.

require "pathname"

if ENV["USER"] == "root"
  abort "Run this as a normal user, I'll sudo if I need to."
end

# Make sure only one fetch process runs at a time.

myself = File.new __FILE__

unless myself.flock File::LOCK_EX | File::LOCK_NB
  abort "You're already running a fetch process! Know a patience."
end

# Yeah yeah, I like to be explicit.

at_exit { myself.flock File::LOCK_UN }

# Flags
require 'optparse'

options = {}
OptionParser.new do |opts|
    opts.banner = "Usage: kms fetch projectname user@server [options]"

    opts.on("-p", "--project PROJECT", "The project you want to fetch") do |project|
        options[:project] = project
    end

    opts.on("-s", "--server SERVER", "The server where you want to fetch from") do |server|
        options[:server] = server
    end

    opts.on("-d", "--debug", "Show debug information") do |debug|
        options[:debug] = debug
    end

    opts.separator ""
    opts.separator "Common options:"

    opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
    end

    opts.on_tail("--version", "Show version") do
        puts "1.0.0"
        exit
    end

end.parse!

unless options.key? :project and options.key? :server
    abort("Both --project and --server are required")
end

options[:path] = `xmlstarlet sel -t -v "/config/var[@name='config.projectsdir']/@value" /opt/kDeploy/tools/config.xml`.strip
options[:update] = File.exists?("/home/projects/#{options[:project]}")


# Rsync the project
puts "  -> rsync the project"

rsync_excludes = [ ".composer", "apachelogs/*", "resizedcache/*", "nobackup/*", "tmp/*", ".viminfo", ".ssh", ".bash_history" ]
if options[:update]
    rsync_excludes << "data/*"
else
    rsync_excludes = rsync_excludes + [ "data/current", "data/releases", "data/shared" ]
end

rsync_command = [ "rsync",  "-rltDhz"]
rsync_excludes.each do |rsync_exclude|
    rsync_command << "--exclude=#{rsync_exclude}"
end

rsync_command << "--progress" if options[:debug]

rsync_command << "#{ENV["USER"]}@#{options[:server]}:/home/projects/#{options[:project]}"
rsync_command << options[:path]

warn rsync_command.join(" ") if options[:debug]
unless system *rsync_command
    abort "There was a problem running rsync. Run using --debug for more information"
end

# Rsync the web folder
if File.exist?("#{options[:path]}#{options[:project]}/data/#{options[:project]}/web/")
    puts "  -> rsync the web folder"
    rsync_command = [ "rsync",  "-rltDhz"]
    rsync_excludes.each do |rsync_exclude|
        rsync_command << "--exclude=#{rsync_exclude}"
    end

    rsync_command << "--progress" if options[:debug]

    rsync_command << "#{ENV["USER"]}@#{options[:server]}:/home/projects/#{options[:project]}/data/shared/web/*"
    rsync_command << "#{options[:path]}#{options[:project]}/data/#{options[:project]}/web/"

    warn rsync_command.join(" ") if options[:debug]
    unless system *rsync_command
        abort "There was a problem running rsync. Run using --debug for more information"
    end
end

# Drop databases
puts "  -> drop the databases"

options[:mysqlpassword] = `xmlstarlet sel -t -v "/config/var[@name='config.mysqladminpassword']/@value" /opt/kDeploy/tools/config.xml`.strip

%x( echo "drop database IF EXISTS #{options[:project]}" | mysql -u root -p#{options[:mysqlpassword]} > /dev/null 2>&1 )

%x( psql #{options[:project]} -c "select 12 as twelve;" >/dev/null 2>&1 || exit 1 )
if ($?.exitstatus == 0)
     %x( psql template1 -c "DROP DATABASE #{options[:project]}" )
end

puts
puts "+-------------------------------------------------------------------------------+"
puts "| Now you need to run your dependency management tools (e.g. composer install), |"
puts "| run fixperms and maintenance quick and finally restart apache.                |"
puts "+-------------------------------------------------------------------------------+"
